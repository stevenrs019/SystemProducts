@model SystemProducts.Models.PRODUCTOS

@{
    ViewBag.Title = "Editar Producto";
}

<h2 class="text-primary"><i class="fa fa-edit"></i> Editar Producto</h2>

@using (Html.BeginForm("Edit", "Productos", FormMethod.Post, new { enctype = "multipart/form-data", id = "editForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IDProducto) <!-- Para identificar el producto -->

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

    <div class="form-group">
        @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", required = "required" })
            @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IDCategoria, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.IDCategoria, ViewBag.IDCategoria as SelectList, "Seleccione una categoría", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.IDCategoria, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Precio, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.Precio, new { @class = "form-control", type = "number", step = "0.01", required = "required", Value = Model.Precio.ToString("0.00", System.Globalization.CultureInfo.InvariantCulture) })
            @Html.ValidationMessageFor(model => model.Precio, "", new { @class = "text-danger" })
        </div>
    </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Stock, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Stock, new { @class = "form-control", type = "number", required = "required" })
                @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Drag and Drop con Dropzone -->
        <div class="form-group">
            <label class="control-label col-md-2">Imagen del Producto</label>
            <div class="col-md-10">
                <!-- Vista previa de la imagen actual -->
                <img src="@Url.Content(Model.Imagen)" class="img-thumbnail" alt="@Model.Nombre" style="max-width: 100%;" onerror="this.onerror=null; this.src='/Content/Img/default.png';">


                <div id="dropzone" class="dropzone"></div>
                @Html.HiddenFor(model => model.Imagen) <!-- Guarda la ruta de la imagen -->
                <small class="text-muted">Arrastra una nueva imagen aquí o haz clic para subirla.</small>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar Cambios" class="btn btn-primary" />
                @Html.ActionLink("Cancelar", "Index", null, new { @class = "btn btn-secondary" })
            </div>
        </div>
    </div>
}

<!-- Configuración de Dropzone -->
<script>
    Dropzone.autoDiscover = false;
    var myDropzone = new Dropzone("#dropzone", {
        url: "@Url.Action("UploadImage", "Productos")",
        paramName: "file",
        maxFiles: 1,
        acceptedFiles: "image/*",
        addRemoveLinks: true,
        dictDefaultMessage: "Arrastra una imagen aquí o haz clic para subirla",
        success: function (file, response) {
            document.getElementById("Imagen").value = response.imageUrl; // Guarda la URL de la imagen en el input oculto
            document.getElementById("previewImage").src = response.imageUrl; // Actualiza la vista previa
        }
    });
</script>
